datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Player {
  id               Int                @id @default(autoincrement())
  name             String             @unique
  inactive         Boolean            @default(false)
  currentELO       Int                @default(1500)
  currentTeamELO   Int                @default(1500)
  matchesAsWinner  Match[]            @relation("MatchWinner")
  matchesAsLoser   Match[]            @relation("MatchLoser")
  previousELO      Int?
  previousTeamELO  Int?
  eloLogs          ELOLog[]
  teamPlayerELOLog TeamPlayerELOLog[]
  matches          Match[]
  teams            Team[]             @relation("TeamMembers")
}

model Match {
  id        Int      @id @default(autoincrement())
  date      DateTime @default(now())
  winnerId  Int
  loserId   Int
  winnerELO Int
  loserELO  Int
  winner    Player   @relation("MatchWinner", fields: [winnerId], references: [id])
  loser     Player   @relation("MatchLoser", fields: [loserId], references: [id])
  playerId  Int?
  matchType String?
  eloLogs   ELOLog[]
  Player    Player?  @relation(fields: [playerId], references: [id])

  @@index([winnerId, loserId])
}

model ELOLog {
  id       Int      @id @default(autoincrement())
  playerId Int
  elo      Int
  date     DateTime @default(now())
  player   Player   @relation(fields: [playerId], references: [id])
  matchId  Int
  match    Match    @relation(fields: [matchId], references: [id], onDelete: Cascade)

  @@index([playerId])
}

model TeamPlayerELOLog {
  id          Int       @id @default(autoincrement())
  playerId    Int
  elo         Int
  date        DateTime  @default(now())
  Player      Player    @relation(fields: [playerId], references: [id])
  teamMatchId Int
  teamMatch   TeamMatch @relation(fields: [teamMatchId], references: [id], onDelete: Cascade)

  @@index([playerId])
}

model TeamELOLog {
  id          Int       @id @default(autoincrement())
  elo         Int
  date        DateTime  @default(now())
  teamId      Int
  team        Team      @relation(fields: [teamId], references: [id])
  teamMatchId Int
  teamMatch   TeamMatch @relation(fields: [teamMatchId], references: [id], onDelete: Cascade)

  @@index([teamId])
}

model Team {
  id                  Int          @id @default(autoincrement())
  players             Player[]     @relation("TeamMembers")
  teamMatchesAsWinner TeamMatch[]  @relation("TeamMatchWinner")
  teamMatchesAsLoser  TeamMatch[]  @relation("TeamMatchLoser")
  currentELO          Int          @default(1500)
  previousELO         Int?
  TeamELOLog          TeamELOLog[]
}

model TeamMatch {
  id               Int                @id @default(autoincrement())
  date             DateTime           @default(now())
  winnerTeamId     Int
  loserTeamId      Int
  winnerELO        Int
  loserELO         Int
  winnerTeam       Team               @relation("TeamMatchWinner", fields: [winnerTeamId], references: [id])
  loserTeam        Team               @relation("TeamMatchLoser", fields: [loserTeamId], references: [id])
  teamPlayerELOLog TeamPlayerELOLog[]
  teamELOLog       TeamELOLog[]

  @@index([winnerTeamId, loserTeamId])
}